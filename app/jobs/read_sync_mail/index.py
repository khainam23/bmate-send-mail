import imaplib
import email
from email.header import decode_header
from typing import Final
import time
import json
import re
from datetime import datetime, timedelta
from datetime import datetime, timedelta, timezone
import requests

from app.core.config import settings

# ==============================
# C·∫•u h√¨nh
# ==============================
IMAP_SERVER: Final = settings.HOST_IMAP
EMAIL_ACCOUNT: Final = settings.EMAIL_ADDRESS
EMAIL_PASSWORD: Final = settings.EMAIL_PASSWORD_APP
WHERE_READ_EMAIL: str = 'INBOX'
READ_TYPE_EMAIL: str = 'ALL'


class EmailExtract:
    def __init__(self, mail, processed_emails, queue_refresh_time):
        self.mail = mail
        self.processed_emails = processed_emails
        self.queue_refresh_time = queue_refresh_time
        self.allowed_senders = self._parse_allowed_senders()
        self._init_queue()
    
    def _parse_allowed_senders(self):
        """Parse danh s√°ch sender ƒë∆∞·ª£c ph√©p t·ª´ config"""
        allowed = settings.ALLOWED_SENDERS.strip()
        if not allowed:
            return None  # None = cho ph√©p t·∫•t c·∫£
        # T√°ch theo d·∫•u ph·∫©y v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng, chuy·ªÉn v·ªÅ lowercase
        return [email.strip().lower() for email in allowed.split(',') if email.strip()]
    
    def _is_sender_allowed(self, from_email):
        """Ki·ªÉm tra sender c√≥ trong whitelist kh√¥ng"""
        if self.allowed_senders is None:
            return True  # Cho ph√©p t·∫•t c·∫£ n·∫øu kh√¥ng c√≥ whitelist
        
        if not from_email:
            return False
        
        # Tr√≠ch xu·∫•t email t·ª´ chu·ªói "Name <email@domain.com>" ho·∫∑c "email@domain.com"
        email_match = re.search(r'<([^>]+)>|([^\s<>]+@[^\s<>]+)', from_email)
        if not email_match:
            return False
        
        sender_email = (email_match.group(1) or email_match.group(2)).strip().lower()
        return sender_email in self.allowed_senders
        
    def login(self):
        self.mail = imaplib.IMAP4_SSL(IMAP_SERVER)
        self.mail.login(EMAIL_ACCOUNT, EMAIL_PASSWORD)
        print("ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng!")
        self.mail.select(WHERE_READ_EMAIL)  # READ-WRITE mode ƒë·ªÉ c√≥ th·ªÉ set Seen

    def _init_queue(self):
        """Kh·ªüi t·∫°o ho·∫∑c refresh queue"""
        current_time = datetime.now().astimezone()
        
        # N·∫øu ch∆∞a c√≥ th·ªùi gian refresh ho·∫∑c ƒë√£ qu√° th·ªùi gian
        if self.queue_refresh_time is None or current_time >= self.queue_refresh_time:
            self.processed_emails.clear()
            days_range = 30 # ch·ªâ l∆∞u trong 30 ng√†y t·ª´ ng√†y ch·∫°y d·ª± √°n
            self.queue_refresh_time = current_time + timedelta(days=days_range)
            print(f"üîÑ Queue ƒë√£ ƒë∆∞·ª£c refresh. S·∫Ω refresh l·∫°i v√†o: {self.queue_refresh_time.strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Hi·ªÉn th·ªã th√¥ng tin whitelist
            if self.allowed_senders:
                print(f"üìã Whitelist sender: {', '.join(self.allowed_senders)}")
            else:
                print("üìã Whitelist sender: Kh√¥ng gi·ªõi h·∫°n (cho ph√©p t·∫•t c·∫£)")

    def _check_and_refresh_queue(self):
        """Ki·ªÉm tra v√† refresh queue n·∫øu c·∫ßn"""
        current_time = datetime.now().astimezone()
        if current_time >= self.queue_refresh_time:
            self._init_queue()

    def _is_email_processed(self, mail_id, msg=None):
        """Ki·ªÉm tra email ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a (bao g·ªìm c·∫£ thread)"""
        email_id = mail_id.decode() if isinstance(mail_id, bytes) else mail_id
        
        # Ki·ªÉm tra mail_id tr∆∞·ªõc
        if email_id in self.processed_emails:
            return True
        
        # N·∫øu c√≥ msg, ki·ªÉm tra thread (Message-ID, In-Reply-To, References)
        if msg:
            # L·∫•y Message-ID c·ªßa email hi·ªán t·∫°i
            message_id = msg.get("Message-ID", "").strip()
            if message_id and message_id in self.processed_emails:
                return True
            
            # Ki·ªÉm tra In-Reply-To (email ƒë∆∞·ª£c reply)
            in_reply_to = msg.get("In-Reply-To", "").strip()
            if in_reply_to and in_reply_to in self.processed_emails:
                return True
            
            # Ki·ªÉm tra References (chu·ªói thread)
            references = msg.get("References", "").strip()
            if references:
                ref_ids = references.split()
                for ref_id in ref_ids:
                    if ref_id in self.processed_emails:
                        return True
        
        return False

    def _mark_email_processed(self, mail_id, msg=None):
        """ƒê√°nh d·∫•u email ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (bao g·ªìm c·∫£ thread IDs)"""
        email_id = mail_id.decode() if isinstance(mail_id, bytes) else mail_id
        self.processed_emails.add(email_id)
        
        # N·∫øu c√≥ msg, l∆∞u c·∫£ Message-ID v√† thread IDs
        if msg:
            # L∆∞u Message-ID c·ªßa email hi·ªán t·∫°i
            message_id = msg.get("Message-ID", "").strip()
            if message_id:
                self.processed_emails.add(message_id)
            
            # L∆∞u In-Reply-To
            in_reply_to = msg.get("In-Reply-To", "").strip()
            if in_reply_to:
                self.processed_emails.add(in_reply_to)
            
            # L∆∞u References
            references = msg.get("References", "").strip()
            if references:
                ref_ids = references.split()
                self.processed_emails.update(ref_ids)

    def list_email_ids(self, limit=None):
        """L·∫•y danh s√°ch email theo th·ªùi gian v√† gi·ªõi h·∫°n s·ªë l∆∞·ª£ng"""
        # Th·ªùi gian b·∫Øt ƒë·∫ßu (N ph√∫t tr∆∞·ªõc), local timezone aware
        time_range_minutes = settings.EMAIL_TIME_RANGE_MINUTES
        since_time = (datetime.now().astimezone() - timedelta(minutes=time_range_minutes))  # aware datetime
        
        # Format ng√†y theo chu·∫©n IMAP (DD-Mon-YYYY)
        since_date = since_time.strftime("%d-%b-%Y")
        search_criteria = f'({READ_TYPE_EMAIL} SINCE {since_date})'
        
        status, data = self.mail.search(None, search_criteria)
        if status != "OK":
            print("Kh√¥ng l·∫•y ƒë∆∞·ª£c email.")
            return []

        mail_ids = data[0].split()
        filtered_ids = []

        for mail_id in mail_ids:
            status, data = self.mail.fetch(mail_id, '(INTERNALDATE)')
            if status != "OK":
                continue

            date_str = data[0].decode()
            match = re.search(r'INTERNALDATE "([^"]+)"', date_str)
            if not match:
                continue

            email_date_str = match.group(1)
            try:
                # Parse email date t·ª´ IMAP (bao g·ªìm timezone)
                email_date = datetime.strptime(email_date_str, "%d-%b-%Y %H:%M:%S %z")
                # Chuy·ªÉn v·ªÅ local timezone (aware datetime)
                email_date_local = email_date.astimezone()
                
                if email_date_local >= since_time:
                    filtered_ids.append(mail_id)
            except ValueError:
                # N·∫øu parse l·ªói, v·∫´n gi·ªØ email
                filtered_ids.append(mail_id)

        if limit is None:
            return filtered_ids
        return filtered_ids[-limit:]

    def fetch_email(self, mail_id):
        """L·∫•y email ch·ªâ theo HTML, kh√¥ng mark Seen t·ª± ƒë·ªông"""
        status, data = self.mail.fetch(mail_id, '(BODY.PEEK[])')
        if status != "OK":
            print(f"Kh√¥ng l·∫•y ƒë∆∞·ª£c email {mail_id.decode()}")
            return None, None, None, None, None

        raw_email = data[0][1]
        msg = email.message_from_bytes(raw_email)

        # Decode subject
        subject, encoding = decode_header(msg["Subject"])[0]
        if isinstance(subject, bytes):
            subject = subject.decode(encoding or "utf-8")

        # Decode sender
        from_ = msg.get("From")
        
        # L·∫•y ng√†y nh·∫≠n email (Date header)
        email_date = None
        date_header = msg.get("Date")
        if date_header:
            try:
                # Parse email date t·ª´ header
                from email.utils import parsedate_to_datetime
                email_datetime = parsedate_to_datetime(date_header)
                # Chuy·ªÉn v·ªÅ local timezone v√† format theo ƒë·ªãnh d·∫°ng mong mu·ªën
                email_date = email_datetime.astimezone().strftime("%d-%m-%Y")
            except Exception as e:
                print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ parse email date: {e}")
                email_date = None

        # L·∫•y body HTML
        body = ""
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                if content_type == "text/html" and "attachment" not in str(part.get("Content-Disposition")):
                    html_body = part.get_payload(decode=True).decode(errors="ignore")
                    body = re.sub('<[^<]+?>', '', html_body).strip()
                    break
        else:
            if msg.get_content_type() == "text/html":
                html_body = msg.get_payload(decode=True).decode(errors="ignore")
                body = re.sub('<[^<]+?>', '', html_body).strip()

        return subject, from_, body, msg, email_date

    def check_email_format(self, subject, body, email_date=None):
        if not body.strip():
            return None
        
        # Kh·ªüi t·∫°o dict ch·ª©a d·ªØ li·ªáu tr√≠ch xu·∫•t
        extracted_data = {
            'name': None,
            'email': None,
            'date': None,
            'content': None,
            'phone': None,
            'visa': None,
            'budget': None,
            'overseas': None,
            'pet': None,
            'contact_platform': None,
            'contact_date': None
        }
        
        # Tr√≠ch xu·∫•t Name (ƒë·∫£m b·∫£o kh√¥ng match "Building name:" ho·∫∑c c√°c tr∆∞·ªùng kh√°c)
        name_match = re.search(r'^[ \t]*Name:\s*([^\n\r]+)', body, re.IGNORECASE | re.MULTILINE)
        if name_match:
            extracted_data['name'] = name_match.group(1).strip()
        
        # Tr√≠ch xu·∫•t Email
        email_match = re.search(r'Email:\s*([^\s\n\r]+@[^\s\n\r]+)', body, re.IGNORECASE)
        if email_match:
            extracted_data['email'] = email_match.group(1).strip()
        
        # Tr√≠ch xu·∫•t Phone
        phone_patterns = [
            r'Phone:\s*([^\n\r]+)',
            r'Tel:\s*([^\n\r]+)',
            r'Mobile:\s*([^\n\r]+)',
            r'Contact\s+Number:\s*([^\n\r]+)'
        ]
        for pattern in phone_patterns:
            phone_match = re.search(pattern, body, re.IGNORECASE)
            if phone_match:
                extracted_data['phone'] = phone_match.group(1).strip()
                break
        
        # Tr√≠ch xu·∫•t Date (Approximate Move-In Date ho·∫∑c c√°c bi·∫øn th·ªÉ)
        date_patterns = [
            r'(?:Approximate\s+)?Move-In\s+Date:\s*([^\n\r]+)',
            r'Date:\s*(\d{1,2}/\d{1,2}/\d{4})',
            r'Move\s+In:\s*([^\n\r]+)'
        ]
        for pattern in date_patterns:
            date_match = re.search(pattern, body, re.IGNORECASE)
            if date_match:
                extracted_data['date'] = date_match.group(1).strip()
                break
        
        # Tr√≠ch xu·∫•t Content/Inquiry
        inquiry_match = re.search(r'Inquiry:\s*([^\n\r]+)', body, re.IGNORECASE)
        if inquiry_match:
            extracted_data['content'] = inquiry_match.group(1).strip()
        
        # Tr√≠ch xu·∫•t Visa
        visa_patterns = [
            r'Visa:\s*([^\n\r]+)',
            r'Visa\s+Type:\s*([^\n\r]+)',
            r'Visa\s+Status:\s*([^\n\r]+)'
        ]
        for pattern in visa_patterns:
            visa_match = re.search(pattern, body, re.IGNORECASE)
            if visa_match:
                extracted_data['visa'] = visa_match.group(1).strip()
                break
        
        # Tr√≠ch xu·∫•t Budget (Ng√¢n s√°ch ti·ªÅn thu√™)
        budget_patterns = [
            r'Budget:\s*([^\n\r]+)',
            r'Rental\s+Budget:\s*([^\n\r]+)',
            r'Price\s+Range:\s*([^\n\r]+)',
            r'Monthly\s+Rent:\s*([^\n\r]+)'
        ]
        for pattern in budget_patterns:
            budget_match = re.search(pattern, body, re.IGNORECASE)
            if budget_match:
                extracted_data['budget'] = budget_match.group(1).strip()
                break
        
        # Tr√≠ch xu·∫•t Overseas (ƒêang ·ªü n∆∞·ªõc ngo√†i/Nh·∫≠t)
        overseas_patterns = [
            r'Overseas:\s*([^\n\r]+)',
            r'Currently\s+in\s+Japan:\s*([^\n\r]+)',
            r'Location:\s*([^\n\r]+)'
        ]
        for pattern in overseas_patterns:
            overseas_match = re.search(pattern, body, re.IGNORECASE)
            if overseas_match:
                extracted_data['overseas'] = overseas_match.group(1).strip()
                break
        
        # Tr√≠ch xu·∫•t Pet
        pet_patterns = [
            r'Pet:\s*([^\n\r]+)',
            r'Pets:\s*([^\n\r]+)',
            r'Have\s+Pet:\s*([^\n\r]+)'
        ]
        for pattern in pet_patterns:
            pet_match = re.search(pattern, body, re.IGNORECASE)
            if pet_match:
                extracted_data['pet'] = pet_match.group(1).strip()
                break
        
        # Tr√≠ch xu·∫•t Contact Platform (N·ªÅn t·∫£ng li√™n h·ªá)
        platform_patterns = [
            r'Contact\s+Platform:\s*([^\n\r]+)',
            r'Platform:\s*([^\n\r]+)',
            r'Source:\s*([^\n\r]+)'
        ]
        for pattern in platform_patterns:
            platform_match = re.search(pattern, body, re.IGNORECASE)
            if platform_match:
                extracted_data['contact_platform'] = platform_match.group(1).strip()
                break
        
        # Tr√≠ch xu·∫•t Contact Date (Ng√†y kh√°ch contact)
        # Ng√†y kh√°ch li√™n l·∫°c l·∫•y theo ng√†y nh·∫≠n ƒë∆∞·ª£c email
        if email_date:
            extracted_data['contact_date'] = email_date
        
        # Ki·ªÉm tra xem c√≥ ƒë·ªß T·∫§T C·∫¢ c√°c tr∆∞·ªùng b·∫Øt bu·ªôc kh√¥ng
        required_fields = {
            'name': extracted_data['name'],
            'phone': extracted_data['phone'],
            'email': extracted_data['email'],
            'contact_date': extracted_data['contact_date'],
            'content': extracted_data['content']
        }
        
        if all(required_fields.values()):
            return extracted_data
        
        # L∆∞u th√¥ng tin c√°c tr∆∞·ªùng thi·∫øu ƒë·ªÉ debug
        extracted_data['_missing_fields'] = [field for field, value in required_fields.items() if not value]
        return None

    def read_and_send_api(self):
        # Ki·ªÉm tra v√† refresh queue n·∫øu c·∫ßn
        self._check_and_refresh_queue()
        
        mail_ids = self.list_email_ids(30)
        print(f"üìß T√¨m th·∫•y {len(mail_ids)} email(s)")
        print(f"üìä Queue hi·ªán t·∫°i: {len(self.processed_emails)} email ƒë√£ x·ª≠ l√Ω")
        
        new_emails_count = 0
        for mail_id in mail_ids:
            # Ki·ªÉm tra email ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a (ch·ªâ theo mail_id)
            if self._is_email_processed(mail_id):
                print(f"‚è≠Ô∏è  B·ªè qua email ID {mail_id.decode()} (ƒë√£ x·ª≠ l√Ω)")
                continue
            
            new_emails_count += 1
            subject, from_, body, msg, email_date = self.fetch_email(mail_id)
            if subject is None:
                continue
            
            # Ki·ªÉm tra sender c√≥ ƒë∆∞·ª£c ph√©p kh√¥ng
            if not self._is_sender_allowed(from_):
                print(f"üö´ B·ªè qua email t·ª´ sender kh√¥ng ƒë∆∞·ª£c ph√©p: {from_}")
                self._mark_email_processed(mail_id)
                continue

            # Ki·ªÉm tra xem email n√†y c√≥ ph·∫£i l√† reply c·ªßa thread ƒë√£ x·ª≠ l√Ω kh√¥ng
            if self._is_email_processed(mail_id, msg):
                print(f"‚è≠Ô∏è  B·ªè qua email '{subject}' (thread ƒë√£ x·ª≠ l√Ω - c√≥ th·ªÉ l√† reply)")
                self._mark_email_processed(mail_id)
                continue

            extracted_data = self.check_email_format(subject, body, email_date)
            if extracted_data:
                print("‚úÖ Email h·ª£p l·ªá - D·ªØ li·ªáu tr√≠ch xu·∫•t:")
                print(f"  - T√™n: {extracted_data['name']}")
                print(f"  - Email: {extracted_data['email']}")
                print(f"  - Ng√†y d·ª± ki·∫øn: {extracted_data['date']}")
                print(f"  - N·ªôi dung: {extracted_data['content']}")
                
                # In c√°c tr∆∞·ªùng t√πy ch·ªçn n·∫øu c√≥
                if extracted_data.get('phone'):
                    print(f"  - S·ªë ƒëi·ªán tho·∫°i: {extracted_data['phone']}")
                if extracted_data.get('visa'):
                    print(f"  - Visa: {extracted_data['visa']}")
                if extracted_data.get('budget'):
                    print(f"  - Ng√¢n s√°ch: {extracted_data['budget']}")
                if extracted_data.get('overseas'):
                    print(f"  - ƒêang ·ªü n∆∞·ªõc ngo√†i: {extracted_data['overseas']}")
                if extracted_data.get('pet'):
                    print(f"  - Nu√¥i pet: {extracted_data['pet']}")
                if extracted_data.get('contact_platform'):
                    print(f"  - N·ªÅn t·∫£ng li√™n h·ªá: {extracted_data['contact_platform']}")
                if extracted_data.get('contact_date'):
                    print(f"  - Ng√†y contact: {extracted_data['contact_date']}")
                
                print("B·∫Øt ƒë·∫ßu g·ª≠i API...")
                self.call_api(extracted_data)
                time.sleep(0.5)
                
                # ƒê√°nh d·∫•u email v√† thread ƒë√£ x·ª≠ l√Ω
                self._mark_email_processed(mail_id, msg)
            else:
                # Email kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc ‚Üí gi·ªØ unseen
                print(f"\n‚ùå Email kh√¥ng h·ª£p l·ªá: {subject}")
                print(f"   üìß From: {from_}")
                
                # Hi·ªÉn th·ªã th√¥ng tin debug v·ªÅ c√°c tr∆∞·ªùng b·ªã thi·∫øu
                if extracted_data is None:
                    print("   ‚ö†Ô∏è  Body email tr·ªëng ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu")
                else:
                    missing_fields = extracted_data.get('_missing_fields', [])
                    if missing_fields:
                        print(f"   ‚ö†Ô∏è  Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: {', '.join(missing_fields)}")
                    
                    # Hi·ªÉn th·ªã c√°c tr∆∞·ªùng ƒë√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c
                    print("   üìã C√°c tr∆∞·ªùng ƒë√£ tr√≠ch xu·∫•t:")
                    print(f"      - Name: {extracted_data.get('name') or '‚ùå THI·∫æU'}")
                    print(f"      - Email: {extracted_data.get('email') or '‚ùå THI·∫æU'}")
                    print(f"      - Phone: {extracted_data.get('phone') or '‚ùå THI·∫æU'}")
                    print(f"      - Contact Date: {extracted_data.get('contact_date') or '‚ùå THI·∫æU'}")
                    print(f"      - Content: {extracted_data.get('content') or '‚ùå THI·∫æU'}")
                    
                    # Hi·ªÉn th·ªã body ƒë·ªÉ debug
                    if settings.DEBUG:
                        # Ch·∫ø ƒë·ªô DEBUG: hi·ªÉn th·ªã to√†n b·ªô body
                        print(f"   üìÑ Full Body (DEBUG mode):")
                        print(f"      {body}")
                    else:
                        # Ch·∫ø ƒë·ªô th∆∞·ªùng: ch·ªâ hi·ªÉn th·ªã 300 k√Ω t·ª± ƒë·∫ßu
                        preview_length = min(300, len(body))
                        print(f"   üìÑ Body preview ({preview_length} k√Ω t·ª± ƒë·∫ßu):")
                        print(f"      {body[:preview_length]}{'...' if len(body) > preview_length else ''}")
                
                # V·∫´n ƒë√°nh d·∫•u ƒë√£ x·ª≠ l√Ω ƒë·ªÉ kh√¥ng ki·ªÉm tra l·∫°i
                self._mark_email_processed(mail_id)
        
        print(f"‚ú® Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {new_emails_count} email m·ªõi")
        
    def call_api(self, extracted_data):
        try:
            url = settings.URL_CALL_CRM_BMATE
            
            json_data = {
                "user_id": 0,
                "recipient": None,
                "token_api": "",
                "opportunity_status": None,
                "opp_type_source": "https://bmate.getflycrm.com",
                "opp_source_content": "http://127.0.0.1",
                "account_type": [],
                "key": settings.KEY_CALL_CRM_BMATE,
                "opp_url_source": "http://127.0.0.1:5500/index.html",
                "account_name": extracted_data.get('name', ""),
                "account_description": extracted_data.get('content', ""),
                "account_email": extracted_data.get('email', ""),
                "account_phone": extracted_data.get('phone', ""),
                "custom_fields": {
                    "ngay_khach_contact": extracted_data.get('contact_date', ""),
                    "visa": extracted_data.get('visa', ""),
                    "ngay_du_kien_vao_nha": extracted_data.get('date', ""),
                    "ngan_sach_tien_thue": extracted_data.get('budget', ""),
                    "overseas_dang_o_nhat": extracted_data.get('overseas', ""),
                    "nuoi_pet": extracted_data.get('pet', ""),
                    "nen_tang_lien_he": extracted_data.get('contact_platform', "")
                },
                "utm_params": {
                    "utm_source": "",
                    "utm_campaign": "",
                    "utm_medium": "",
                    "utm_content": "",
                    "utm_term": "",
                    "utm_user": "",
                    "utm_account": "",
                    "sources": "http://127.0.0.1:5500/index.html"
                }
            }
            
            data_form = {
                "data_form": json.dumps(json_data),
                "verify_with_google_recaptcha": False
            }
            
            response = requests.post(url, json=data_form)
            
            if response.status_code == 200:
                print(f"‚úÖ G·ª≠i API th√†nh c√¥ng! Response: {response.text[:200]}")
                return True
            else:
                print(f"‚ö†Ô∏è API tr·∫£ v·ªÅ status: {response.status_code}, Response: {response.text[:200]}")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ªçi API: {str(e)}")
            return False
    
    
    def logout(self):
        self.mail.logout()
        
email_extarct = EmailExtract(None, set(), None)